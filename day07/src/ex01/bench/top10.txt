Total: 30ms
ROUTINE ======================== day07/ex01/mincoins.MinCoins2 in /Users/nosppiks/21-school/go_bootcamp/Go_Day07-1/src/ex01/mincoins/minCoins2.go
         0       20ms (flat, cum) 66.67% of Total
         .          .      4:func MinCoins2(val int, coins []int) []int {
         .          .      5:	// Если сумма равна 0, то не нужно никаких монет
         .          .      6:	if val == 0 {
         .          .      7:		return []int{}
         .          .      8:	}
         .          .      9:
         .          .     10:	// Если массив монет пуст, то невозможно достичь суммы
         .          .     11:	if coins == nil {
         .          .     12:		return nil
         .          .     13:	}
         .          .     14:
         .          .     15:	// Если массив монет пуст, то невозможно достичь суммы
         .          .     16:	if len(coins) == 0 {
         .          .     17:		return []int{}
         .          .     18:	}
         .          .     19:
         .          .     20:	// Создаем карту сумм, где ключ - сумма, а значение - минимальное количество монет для этой суммы
         .          .     21:	sums := make(map[int]int)
         .          .     22:	for i := 1; i <= val; i++ {
         .       10ms     23:		sums[i] = val + 1 // инициализируем значения как максимально возможное количество монет
         .          .     24:	}
         .          .     25:	sums[0] = 0 // для суммы 0 нужно 0 монет
         .          .     26:
         .          .     27:	// Проходим по каждой монете и обновляем значения в карте сумм
         .          .     28:	for _, coin := range coins {
         .          .     29:		for i := coin; i <= val; i++ {
         .          .     30:			if sums[i-coin]+1 < sums[i] {
         .          .     31:				sums[i] = sums[i-coin] + 1 // если можно достичь суммы i с помощью монеты coin, то обновляем значение
         .          .     32:			}
         .          .     33:		}
         .          .     34:	}
         .          .     35:
         .          .     36:	// Создаем массив для хранения результата
         .          .     37:	ans := make([]int, 0)
         .          .     38:	idx := val
         .          .     39:	// Проходим от суммы val до 0 и добавляем монеты в массив результата
         .          .     40:	for idx > 0 {
         .          .     41:		for _, coin := range coins {
         .          .     42:			if idx-coin >= 0 && sums[idx] == sums[idx-coin]+1 {
         .       10ms     43:				ans = append(ans, coin) // добавляем монету в массив результата
         .          .     44:				idx -= coin // уменьшаем сумму на значение монеты
         .          .     45:				break
         .          .     46:			}
         .          .     47:		}
         .          .     48:	}
